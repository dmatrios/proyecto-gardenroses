@model List<gardenrosesmvc2.Models.DetallePedido>

@{
    ViewBag.Title = "Gestión de Detalles de Pedido";
}

<div class="container mt-4">
    <h2 class="mb-4 text-center">Gestión de Detalles de Pedido</h2>

    <form id="formularioDetalle" class="border p-4 rounded shadow-sm bg-light">
        <input type="hidden" id="idDetallePedido" name="IdDetallePedido" />

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="idPedido" class="form-label">ID Pedido</label>
                <input type="number" class="form-control" id="idPedido" name="IdPedido" required>
            </div>
            <div class="col-md-6">
                <label for="idProducto" class="form-label">ID Producto</label>
                <input type="number" class="form-control" id="idProducto" name="IdProducto" required>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="cantidad" class="form-label">Cantidad</label>
                <input type="number" class="form-control" id="cantidad" name="Cantidad" required>
            </div>
            <div class="col-md-6">
                <label for="precioUnitario" class="form-label">Precio Unitario</label>
                <input type="number" step="0.01" class="form-control" id="precioUnitario" name="PrecioUnitario" required>
            </div>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-success" onclick="crearDetalle()">Registrar</button>
            <button type="button" class="btn btn-primary" onclick="editarDetalle()">Actualizar</button>
        </div>
    </form>

    <hr class="my-4" />

    <div class="table-responsive">
        <table class="table table-bordered table-hover table-striped text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID Detalle</th>
                    <th>ID Pedido</th>
                    <th>ID Producto</th>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio Unitario</th>
                    <th>Subtotal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.IdDetallePedido</td>
                        <td>@item.IdPedido</td>
                        <td>@item.IdProducto</td>
                        <td>@item.NombreProducto</td>
                        <td>@item.Cantidad</td>
                        <td>@item.PrecioUnitario.ToString("F2")</td>
                        <td>@item.Subtotal.ToString("F2")</td>
                        <td>
                            <div class="d-flex flex-column gap-1">
                                <button class="btn btn-warning btn-sm" onclick="seleccionar(
                                    '@item.IdDetallePedido',
                                    '@item.IdPedido',
                                    '@item.IdProducto',
                                    '@item.Cantidad',
                                    '@item.PrecioUnitario')">
                                    Seleccionar
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="eliminarDetalle(@item.IdDetallePedido)">Eliminar</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section scripts {
    <script>
        function seleccionar(idDetalle, idPedido, idProducto, cantidad, precio) {
            document.getElementById("idDetallePedido").value = idDetalle;
            document.getElementById("idPedido").value = idPedido;
            document.getElementById("idProducto").value = idProducto;
            document.getElementById("cantidad").value = cantidad;
            document.getElementById("precioUnitario").value = precio;
        }

        async function crearDetalle() {
            const datos = obtenerDatosFormulario();
            const response = await fetch("/DetallePedido/Crear", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(datos)
            });
            location.reload();
        }

        async function editarDetalle() {
            const datos = obtenerDatosFormulario();
            const response = await fetch("/DetallePedido/Editar", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(datos)
            });
            location.reload();
        }

        async function eliminarDetalle(id) {
            if (!confirm("¿Seguro de eliminar este detalle?")) return;

            const response = await fetch("/DetallePedido/Eliminar", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id })
            });
            location.reload();
        }

        function obtenerDatosFormulario() {
            return {
                IdDetallePedido: parseInt(document.getElementById("idDetallePedido").value) || 0,
                IdPedido: parseInt(document.getElementById("idPedido").value),
                IdProducto: parseInt(document.getElementById("idProducto").value),
                Cantidad: parseInt(document.getElementById("cantidad").value),
                PrecioUnitario: parseFloat(document.getElementById("precioUnitario").value)
            };
        }
    </script>
}
